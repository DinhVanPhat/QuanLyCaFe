/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.cafe.form;

import com.cafe.dao.ChiTietHoaDonDAO;
import com.cafe.dao.HoaDonDAO;
import com.cafe.dao.SanPhamDAO;
import com.cafe.dao.ThongKeBaoCaoDAO;
import com.cafe.model.Ban;
import com.cafe.model.ChiTietHoaDon;
import com.cafe.model.HoaDon;
import com.cafe.model.SanPham;
import com.cafe.model.ThongKeBaoCao;
import com.cafe.utils.XDate;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.streaming.SXSSFRow;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author ACER
 */
public class ThongKeBaoCaoJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ThongKeBaoCaoJPanel
     */
    public ThongKeBaoCaoJPanel() {
        initComponents();
        init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        txtDen = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        cboTheoSanPham = new javax.swing.JComboBox<>();
        jLabel58 = new javax.swing.JLabel();
        btnXuatFile = new javax.swing.JButton();
        btnXemThongKe = new javax.swing.JButton();
        jLabel51 = new javax.swing.JLabel();
        txtTu = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblThongKe = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDoanhThuSP = new javax.swing.JTable();

        setBackground(new java.awt.Color(230, 213, 193));

        jPanel7.setBackground(new java.awt.Color(230, 213, 193));

        jLabel52.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(97, 67, 67));
        jLabel52.setText("Từ");

        txtDen.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDen.setPreferredSize(new java.awt.Dimension(300, 22));

        jLabel56.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel56.setForeground(new java.awt.Color(97, 67, 67));
        jLabel56.setText("Đến");

        cboTheoSanPham.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboTheoSanPham.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTheoSanPhamActionPerformed(evt);
            }
        });

        jLabel58.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(97, 67, 67));
        jLabel58.setText("Theo Sản Phẩm");

        btnXuatFile.setBackground(new java.awt.Color(191, 158, 117));
        btnXuatFile.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btnXuatFile.setForeground(new java.awt.Color(255, 255, 255));
        btnXuatFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cafe/icon/xuatfile.png"))); // NOI18N
        btnXuatFile.setText("Xuất file Excel");
        btnXuatFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatFileActionPerformed(evt);
            }
        });

        btnXemThongKe.setBackground(new java.awt.Color(191, 158, 117));
        btnXemThongKe.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btnXemThongKe.setForeground(new java.awt.Color(255, 255, 255));
        btnXemThongKe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cafe/icon/thongke.png"))); // NOI18N
        btnXemThongKe.setText("Xem thống kê");
        btnXemThongKe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXemThongKeActionPerformed(evt);
            }
        });

        jLabel51.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel51.setForeground(new java.awt.Color(97, 67, 67));
        jLabel51.setText("DANH SÁCH NHÂN VIÊN");

        txtTu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtTu.setPreferredSize(new java.awt.Dimension(300, 22));

        jLabel33.setBackground(new java.awt.Color(97, 67, 67));
        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(97, 67, 67));
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("Thống Kê Và Báo Cáo");

        tblThongKe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã Sản Phẩm", "Tên Sản phẩm", "Loại", "Đơn Giá", "Số Lượng Bán Ra", "Tổng Doanh Thu", "Ngày Thanh Toán"
            }
        ));
        tblThongKe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblThongKeMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblThongKe);

        jTabbedPane1.addTab("Thống Kê Doanh Thu", jScrollPane4);

        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblHoaDon);

        jTabbedPane1.addTab("Danh Sách Hóa Đơn", jScrollPane1);

        tblDoanhThuSP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblDoanhThuSP);

        jTabbedPane1.addTab("Doanh Thu Sản Phẩm", jScrollPane2);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(txtTu, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnXemThongKe))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(txtDen, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(63, 63, 63)
                                        .addComponent(jLabel58, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(34, 34, 34)
                                        .addComponent(cboTheoSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnXuatFile)))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 101, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel33)
                .addGap(42, 42, 42)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(txtTu, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel56)
                    .addComponent(txtDen, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel58)
                    .addComponent(cboTheoSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnXemThongKe, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXuatFile, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67)
                .addComponent(jLabel51)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnXuatFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatFileActionPerformed
        xuatFile();
    }//GEN-LAST:event_btnXuatFileActionPerformed

    private void btnXemThongKeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXemThongKeActionPerformed
        xemThongKe();
    }//GEN-LAST:event_btnXemThongKeActionPerformed

    private void tblThongKeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblThongKeMouseClicked

    }//GEN-LAST:event_tblThongKeMouseClicked

    private void cboTheoSanPhamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTheoSanPhamActionPerformed
        String loai = (String) cboTheoSanPham.getSelectedItem();
        fillToThongKeTable();
        if (loai.equals("Tất cả")) {
            fillHoaDonToTable();
            fillDoanhThuSPToTable();
        } else {
            fillHoaDonToTableTheoLoai();
            fillDoanhThuSPToTableTheoLoai();
        }
    }//GEN-LAST:event_cboTheoSanPhamActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnXemThongKe;
    private javax.swing.JButton btnXuatFile;
    private javax.swing.JComboBox<String> cboTheoSanPham;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblDoanhThuSP;
    private javax.swing.JTable tblHoaDon;
    private javax.swing.JTable tblThongKe;
    private javax.swing.JTextField txtDen;
    private javax.swing.JTextField txtTu;
    // End of variables declaration//GEN-END:variables

    //
    ThongKeBaoCaoDAO thongKeDAO = new ThongKeBaoCaoDAO();
    SanPhamDAO spdao = new SanPhamDAO();
    HoaDonDAO hddao = new HoaDonDAO();
    ThongKeBaoCao tK = new ThongKeBaoCao();
    ChiTietHoaDonDAO cthddao = new ChiTietHoaDonDAO();
    ArrayList<ThongKeBaoCao> thongKe = new ArrayList();
    int row = -1;
//    int countXemHD = -1;

    private void init() {
        fillComboBoxTheoLoai();
        this.fillToThongKeTable();
        this.fillHoaDonToTable();
        fillDoanhThuSPToTable();
        this.row = -1;
        focusInput();
        setBorderInput();
    }

    public void fillHoaDonToTable() {
        String[] columnNames = {"Mã HD", "Mã bàn", "Ngày đặt bàn", "Thời Gian tạo HD", "Ngày thanh toán", "Thời gian thanh toán", "Mã NV", "Tổng tiền", "Trạng Thái"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        List<HoaDon> list = hddao.selectAll();
        for (HoaDon hd : list) {
            model.addRow(new Object[]{hd.getMaHD(), hd.getMaBan(), hd.getNgayDatBan(), hd.getThoiGianTaoHD(), hd.getNgayThanhToan(),
                hd.getThoiGianThanhToan(), hd.getMaNV(), hd.getTongTien(), hd.isTrangThai() ? "Chưa Thanh Toán" : "Đã Thanh Toán"});
            tblHoaDon.setModel(model);
        }

    }

    public void fillHoaDonToTableTheoLoai() {
        String[] columnNames = {"Mã HD", "Mã bàn", "Ngày đặt bàn", "Thời Gian tạo HD", "Ngày thanh toán", "Thời gian thanh toán", "Mã NV", "Tổng tiền", "Trạng Thái"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        List<SanPham> splist = spdao.selectByKeyWord((String) cboTheoSanPham.getSelectedItem());
        for (SanPham sanPham : splist) {
            List<HoaDon> list = hddao.selectAll();
            for (HoaDon hd : list) {
                List<ChiTietHoaDon> listcthd = cthddao.selectByMaHD(hd.getMaHD());
                for (ChiTietHoaDon chiTietHoaDon : listcthd) {
                    if (chiTietHoaDon.getMaSP().equals(sanPham.getMaSP())) {
                        model.addRow(new Object[]{hd.getMaHD(), hd.getMaBan(), hd.getNgayDatBan(), hd.getThoiGianTaoHD(), hd.getNgayThanhToan(),
                            hd.getThoiGianThanhToan(), hd.getMaNV(), hd.getTongTien(), hd.isTrangThai() ? "Chưa Thanh Toán" : "Đã Thanh Toán"});
                        tblHoaDon.setModel(model);
                    }
                }

            }
        }

    }

    public void fillDoanhThuSPToTable() {
        String[] columnNames = {"Mã SP", "Tên SP", "Loại SP", "Đơn Giá", "Số Lượng Bán", "Tổng Tiền"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        List<Object[]> list = spdao.getDoanhThuSP();
        for (Object[] sp : list) {
//            Object[] row = {sp.getMaSP(),sp.getTenSP(),sp.getLoaiSP(),sp.getGia(),sp.getSoLuong(),
//                       sp.getTongTien()};
            model.addRow(sp);
            tblDoanhThuSP.setModel(model);
        }

    }

    public void fillDoanhThuSPToTableTheoLoai() {
        String loai = (String) cboTheoSanPham.getSelectedItem();
        String[] columnNames = {"Mã SP", "Tên SP", "Loại SP", "Đơn Giá", "Số Lượng Bán", "Tổng Tiền"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        List<Object[]> list = spdao.getDoanhThuSPTheoLoai(loai);
        for (Object[] sp : list) {
//            Object[] row = {sp.getMaSP(),sp.getTenSP(),sp.getLoaiSP(),sp.getGia(),sp.getSoLuong(),
//                       sp.getTongTien()};
            model.addRow(sp);
            tblDoanhThuSP.setModel(model);
        }

    }

    public void fillToThongKeTable() {
        String loaiSP = (String) cboTheoSanPham.getSelectedItem();
        String[] columnNames = {"Ngày thanh toán", "Tên SP", "Số lượng", "Tổng tiền",};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        if (loaiSP.equalsIgnoreCase("Tất cả")) {
            try {
                List<ThongKeBaoCao> list = thongKeDAO.selectAll();
                for (ThongKeBaoCao thongKe : list) {
                    Object[] row = {thongKe.getNgayThanhToan(), thongKe.getTenSP(), thongKe.getSoLuongBan(), thongKe.getTongTien()};
                    model.addRow(row);
                    tblThongKe.setModel(model);
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        } else {
            try {
                List<ThongKeBaoCao> list = thongKeDAO.selectByLoaiSP(loaiSP);
                for (ThongKeBaoCao thongKe : list) {
                    Object[] row = {thongKe.getNgayThanhToan(), thongKe.getTenSP(), thongKe.getSoLuongBan(), thongKe.getTongTien()};
                    model.addRow(row);
                    tblThongKe.setModel(model);
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

    }

    private void fillComboBoxTheoLoai() {
        List<SanPham> list = spdao.selectLayLoaiSP();
        cboTheoSanPham.addItem("Tất cả");
        for (SanPham sp : list) {
            cboTheoSanPham.addItem(sp.getLoaiSP());
        }
    }

    void xemThongKe() {
        DefaultTableModel modelThongKe = (DefaultTableModel) tblThongKe.getModel();
        DefaultTableModel modelHoaDon = (DefaultTableModel) tblHoaDon.getModel();
        DefaultTableModel modelSanPham = (DefaultTableModel) tblDoanhThuSP.getModel();

        modelThongKe.setRowCount(0);
        modelHoaDon.setRowCount(0);
        modelSanPham.setRowCount(0);

        try {
            Date tuNgay = XDate.toDate(txtTu.getText(), "yyyy-MM-dd");
            Date denNgay = XDate.toDate(txtDen.getText(), "yyyy-MM-dd");

            List<Object[]> listThongKe = thongKeDAO.getThongKe(tuNgay, denNgay);
            for (Object[] thongKe : listThongKe) {
                modelThongKe.addRow(new Object[]{thongKe[0], thongKe[1], thongKe[2], thongKe[3]});
            }

            HoaDonDAO hd = new HoaDonDAO();
            List<Object[]> listHoaDon = hd.getHoaDon(tuNgay, denNgay);

            for (Object[] hoaDon : listHoaDon) {
                modelHoaDon.addRow(new Object[]{hoaDon[0], hoaDon[1], hoaDon[2], hoaDon[3], hoaDon[4], hoaDon[5], hoaDon[6], hoaDon[7], hoaDon[8]});

            }

            // List<Object[]> listSanPham = SanPhamDAO.getSanPham(tuNgay, denNgay);
//            for (Object[] sanPham : listSanPham) {
//                modelSanPham.addRow(new Object[]{sanPham[0], sanPham[1], sanPham[2], sanPham[3]});
//            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

//    void setForm(ThongKeBaoCao b) {
//        txtTu.setText(XDate.toDate(txtTu.getText(), "yyyy-MM-dd"));
//        txtDen.setText(XDate.toDate(txtDen.getText(), "yyyy-MM-dd"));
//        cboTheoSanPham.setSelectedItem(b.getTheoSanPham());
//    }
    ThongKeBaoCao getForm() {
        ThongKeBaoCao tk = new ThongKeBaoCao();
        tk.setTuNgay(XDate.toDate(txtTu.getText(), "yyyy-MM-dd"));
        tk.setDenNgay(XDate.toDate(txtDen.getText(), "yyyy-MM-dd"));
        tk.setTheoSanPham(cboTheoSanPham.getSelectedItem() + "");
        return null;
    }

    public void xuatFile() {
        try {
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet sheetThongKe = workbook.createSheet("Thống Kê");
            XSSFSheet sheetHoaDon = workbook.createSheet("Hóa Đơn");
            XSSFSheet sheetSanPham = workbook.createSheet("Sản Phẩm");

            XSSFRow row = null;
            Cell cell = null;
            row = sheetThongKe.createRow(1);

            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Ngày Thanh Toán");

            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Tên Sản Phẩm");

            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Số Lượng Bán Ra");

            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Tổng Tiền");

            //hoa don
            row = sheetHoaDon.createRow(1);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Mã Hóa Đơn");

            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Mã Bàn");

            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Ngày Đặt Bàn");

            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Thời Gian Tạo Hóa Đơn");

            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("Ngày thanh toán");

            cell = row.createCell(5, CellType.STRING);
            cell.setCellValue("Thời gian thanh toán");
            cell = row.createCell(6, CellType.STRING);
            cell.setCellValue("Mã Nhân Viên");
            cell = row.createCell(7, CellType.STRING);
            cell.setCellValue("Tổng Tiền");
            cell = row.createCell(8, CellType.STRING);
            cell.setCellValue("Trạng Thái");

            // san pham
            row = sheetSanPham.createRow(1);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Mã Sản Phẩm");

            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Tên Sản Phẩm");

            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Loại");

            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Đơn Giá");

            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("Số Lượng Bán");

            cell = row.createCell(5, CellType.STRING);
            cell.setCellValue("Tổng Tiền");
            //
            try {
                for (int i = 0; i < tblThongKe.getRowCount(); i++) {
                    row = sheetThongKe.createRow(2 + i);
                    
                    cell = row.createCell(0, CellType.STRING);
                    cell.setCellValue(String.valueOf( tblThongKe.getValueAt(i, 0)));

                    cell = row.createCell(1, CellType.STRING);
                    cell.setCellValue((String) tblThongKe.getValueAt(i, 1));

                    cell = row.createCell(2, CellType.NUMERIC);
                    cell.setCellValue((Integer) tblThongKe.getValueAt(i, 2));

                    cell = row.createCell(3, CellType.NUMERIC);
                    cell.setCellValue((Double) tblThongKe.getValueAt(i, 3));
                }

                for (int i = 0; i < tblHoaDon.getRowCount(); i++) {
                    row = sheetHoaDon.createRow(2 + i);

                    cell = row.createCell(0, CellType.NUMERIC);
                    cell.setCellValue((Integer) tblHoaDon.getValueAt(i, 0));

                    cell = row.createCell(1, CellType.STRING);
                    cell.setCellValue(String.valueOf(tblHoaDon.getValueAt(i, 1)));

                    cell = row.createCell(2, CellType.STRING);
                    cell.setCellValue(String.valueOf(tblHoaDon.getValueAt(i, 2)));

                    cell = row.createCell(3, CellType.STRING);
                    cell.setCellValue(String.valueOf( tblHoaDon.getValueAt(i, 3)));

                    cell = row.createCell(4, CellType.STRING);
                    cell.setCellValue(String.valueOf(tblHoaDon.getValueAt(i, 4)));

                    cell = row.createCell(5, CellType.STRING);
                    cell.setCellValue(String.valueOf(tblHoaDon.getValueAt(i, 5)));

                    cell = row.createCell(6, CellType.STRING);
                    cell.setCellValue(String.valueOf(tblHoaDon.getValueAt(i, 6)));

                    cell = row.createCell(7, CellType.NUMERIC);
                    cell.setCellValue((Double) tblHoaDon.getValueAt(i, 7));

                    cell = row.createCell(8, CellType.STRING);
                    cell.setCellValue(String.valueOf(tblHoaDon.getValueAt(i, 8)));

                }
                for (int i = 0; i < tblDoanhThuSP.getRowCount(); i++) {

                    row = sheetSanPham.createRow(2 + i);

                    cell = row.createCell(0, CellType.STRING);
                    cell.setCellValue(String.valueOf(tblDoanhThuSP.getValueAt(i, 0)));

                    cell = row.createCell(1, CellType.STRING);
                    cell.setCellValue(String.valueOf(tblDoanhThuSP.getValueAt(i, 1)));

                    cell = row.createCell(2, CellType.STRING);
                    cell.setCellValue(String.valueOf(tblDoanhThuSP.getValueAt(i, 2)));

                    cell = row.createCell(3, CellType.NUMERIC);
                    cell.setCellValue((Double) tblDoanhThuSP.getValueAt(i, 3));

                    cell = row.createCell(4, CellType.NUMERIC);
                    cell.setCellValue((Integer)tblDoanhThuSP.getValueAt(i, 4));

                    cell = row.createCell(5, CellType.NUMERIC);
                    cell.setCellValue((Double) tblDoanhThuSP.getValueAt(i, 5));

                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }

            File f = new File("C:\\Users\\NGHIA\\Documents\\HOC KY 4\\Du an 1 - PRO1041\\QuanLyCaFe\\BrotherCafe\\src\\com\\cafe\\connect\\thongke.xlsx");
            try {
                FileOutputStream fis = new FileOutputStream(f);
                workbook.write(fis);
                fis.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();

            } catch (IOException e) {
                e.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Xuất file thành công");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "lỗi mở file");
        }
    }

    private void focusInput() {

        Border borderNhanVao = BorderFactory.createLineBorder(new Color(227, 188, 140), 10, true);
        Border borderKhongNhan = BorderFactory.createLineBorder(new Color(255, 255, 255), 10, true);
        txtTu.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                txtTu.setBackground(new Color(227, 188, 140));
                txtTu.setBorder(borderNhanVao);
            }

            @Override
            public void focusLost(FocusEvent e) {
                txtTu.setBackground(new Color(255, 255, 255));
                txtTu.setBorder(borderKhongNhan);
            }
        });
        txtDen.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                txtDen.setBackground(new Color(227, 188, 140));
                txtDen.setBorder(borderNhanVao);
            }

            @Override
            public void focusLost(FocusEvent e) {
                txtDen.setBackground(new Color(255, 255, 255));
                txtDen.setBorder(borderKhongNhan);
            }
        });
    }

    void clearForm() {
//        Ban ban = new Ban();
//        this.setForm(ban);
//        this.row = -1;
//        this.updateStatus();
//        tblBan.clearSelection();
    }

    private void setBorderInput() {
        Border border = BorderFactory.createLineBorder(new Color(255, 255, 255), 10, true);
        txtTu.setBorder(border);
        txtDen.setBorder(border);
    }

}
